{% for type in types.protocols|annotated:"typeerase" %}
 - {{type.name}} / {{type.annotations.typeerase}}

class Any{{type.name}}<Base>: {{type.name}} {
  typealias {{type.annotations.typeerase}} = Base

  {% for func in type.methods %}
  private let _{{func.shortName}}: (({% for p in func.parameters %}{{p.typeName}}{% if not forloop.last %},{% endif %}{% endfor %}) -> {{func.returnTypeName}})
  {% endfor %}

  required init<T: {{type.name}}>(_ base: T) where T.{{type.annotations.typeerase}} == Base {
	{% for func in type.methods %}
  	_{{func.shortName}} = base.{{func.shortName}}
    {% endfor %}  
  }

  {% for func in type.methods %}
  func {{func.shortName}}({% for p in func.parameters %}{{p.name}}: {{p.typeName}}{% if not forloop.last %},{% endif %}{% endfor %}) {
    return _{{func.shortName}}({% for p in func.parameters %}{{p.name}}{% if not forloop.last %},{% endif %}{% endfor %})
  }
  {% endfor %}  
}

{% endfor %}

class AnyPokemon<Base>: Pokemon {
  typealias PokemonType = Base

  private let _attack: ((Base) -> Void)

  required init<U:Pokemon>(_ pokemon: U) where U.PokemonType == Base {
    _attack = pokemon.attack
  }

  func attack(move type: Base) {
    return _attack(type)
  }
}